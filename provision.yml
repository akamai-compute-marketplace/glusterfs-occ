---
# create gluster server and client instances
- name: create gluster instances
  hosts: localhost
  vars_files:
      - group_vars/gluster/vars
      - group_vars/gluster/secret_vars
  
  vars:
    count: '{{ cluster_size - 1 }}'

  tasks:
  - name: creating gluster servers
    linode.cloud.instance:
      label: '{{ instance_prefix }}{{ item | int + 1 }}-{{ uuid }}'
      api_token: '{{ token }}'
      type: '{{ type }}'
      region: '{{ region }}'
      image: '{{ image }}'
      root_pass: '{{ root_pass }}'
      authorized_keys: '{{ ssh_keys }}'
      private_ip: true
      stackscript_id: 1350790
      ua_prefix: 'marketplace-glusterfs-occ'          
      tags: '{{ linode_tags }}'
      state: present
    with_sequence: count='{{ count }}'

  - name: get info about the instances
    linode.cloud.instance_info:
      api_token: '{{ token }}'
      label: '{{ instance_prefix }}{{ item }}-{{ uuid }}'
    register: info
    with_sequence: count='{{ cluster_size }}'

  - name: update group_vars
    blockinfile:
      path: ./group_vars/gluster/vars
      marker: "# {mark} INSTANCE VARS"
      block: |
        #jinja2: trim_blocks:False
        gluster_data:
          server:
            {%- for count in range(cluster_size) %}
            - gluster{{ count + 1 }}:
              instance:
                hostname: gluster{{ count + 1 }}
                ip_pub1: {{ info.results[count].instance.ipv4[0] }}
                ip_priv1: {{ info.results[count].instance.ipv4[1] }}
            {%- endfor %}
          {% if client_ips is defined %}
          client:
            {% set count = namespace(value=0) %}
            {%- for ip in client_ips %}
            - client{{ count.value | int + 1 }}:
              instance:
                hostname: client{{ count.value | int + 1 }}
                ip_pub1: {{ ip }}
            {%- set count.value = count.value + 1 %}
            {%- endfor %}
          {% endif %}

  - name: add gluster nodes to inventory
    blockinfile:
      path: ./hosts
      marker: "# {mark} GLUSTER INSTANCES"
      block: |
        #jinja2: trim_blocks:False
        [gluster_servers]
        localhost ansible_connection=local user=root
        {%- for count in range(cluster_size - 1) %}
        {{ info.results[count + 1].instance.ipv4[0] }}
        {%- endfor %}

  - name: wait for port 22 to become open
    wait_for:
      port: 22
      host: '{{ item.instance.ipv4[0] }}'
      search_regex: OpenSSH
      delay: 10
    connection: local
    with_items: "{{ info.results }}"